apiVersion: tekton.dev/v1
kind: TaskRun
metadata:
  name: provision-ephemeral-cluster
spec:
  taskSpec:
    steps:
      - name: get-supported-versions
        ref:
          resolver: git
          params:
            - name: url
              value: https://github.com/amisstea/tekton-integration-tools.git
            - name: revision
              value: main
            - name: pathInRepo
              value: stepactions/get-hypershift-supported-versions.yaml
      - name: pick-version
        ref:
          resolver: git
          params:
            - name: url
              value: https://github.com/amisstea/tekton-integration-tools.git
            - name: revision
              value: main
            - name: pathInRepo
              value: stepactions/find-latest-openshift-version-by-prefix.yaml
        params:
          - name: prefix
            value: "$(steps.get-supported-versions.results.versions[0])."
      - name: create-cluster
        ref:
          resolver: git
          params:
            - name: url
              value: https://github.com/amisstea/tekton-integration-tools.git
            - name: revision
              value: main
            - name: pathInRepo
              value: stepactions/create-cluster-hypershift-aws.yaml
        params:
          - name: instanceType
            value: m6g.large
          - name: version
            value: "$(steps.pick-version.results.version)"
      - name: get-kubeconfig
        ref:
          resolver: git
          params:
            - name: url
              value: https://github.com/amisstea/tekton-integration-tools.git
            - name: revision
              value: main
            - name: pathInRepo
              value: stepactions/get-cluster-info.yaml
        params:
          - name: clusterName
            value: "$(steps.create-cluster.results.clusterName)"
          - name: credentialsVolume
            value: example-volume
      - name: verify
        image: quay.io/redhat-appstudio/appstudio-utils@sha256:586149e3f18d966f681d956ab074b4e1d8433663d615ed86e19a3804ba952dfe
        env:
          - name: KUBECONFIG
            value: "$(steps.get-cluster-info.results.kubeconfig)"
        volumeMounts:
          - name: example-volume
            mountPath: /credentials
        script: |
          #!/bin/bash
          set -exo pipefail
          oc run --kubeconfig /credentials/$KUBECONFIG test-pod --image=nginx
          oc get --kubeconfig /credentials/$KUBECONFIG pods
          oc get --kubeconfig /credentials/$KUBECONFIG pods test-pod -o=jsonpath='{.metadata.namespace}'
          oc delete --kubeconfig /credentials/$KUBECONFIG pod test-pod
    volumes:
      - name: example-volume
        emptyDir: {}
